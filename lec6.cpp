
// You are developing a sales analytics system for a retail company. As part of the system, you need to implement a feature that sorts the sales data in descending order based on the revenue generated by each product.



// Write a program that prompts the user to enter the number of products and their respective revenue figures. The program should then use the insertion sort algorithm to sort the revenue figures in descending order and print with its iteration. After sorting, the program should display the products along with their corresponding sorted revenue figures.



// This feature will help the retail company identify its top-performing products and prioritize their sales efforts accordingly. It provides a clear view of the revenue generated by each product, aiding in strategic decision-making and optimizing sales performance within the company.



// Note: This is a sample question asked in Capgemini recruitment.

// Input format :
// The first line of input consists of N, representing the size of the array.

// The second line of input consists of the N array elements, separated by space.

// Output format :
// The first line of output prints the initial array of elements, separated by space.

// The following lines print the result of each iteration.

// The last line of output prints the final sorted array in decreasing order.



// Refer to the sample output for formatting specifications.

// Code constraints :
// N > 0

// Sample test cases :
// Input 1 :
// 4
// 471 774 814 136
// Output 1 :
// Initial order: 471 774 814 136 
// After Iteration 1: 774 471 814 136 
// After Iteration 2: 814 774 471 136 
// After Iteration 3: 814 774 471 136 
// Sorted order: 814 774 471 136 
// Input 2 :
// 5
// 207 455 129 367 578
// Output 2 :
// Initial order: 207 455 129 367 578 
// After Iteration 1: 455 207 129 367 578 
// After Iteration 2: 455 207 129 367 578 
// After Iteration 3: 455 367 207 129 578 
// After Iteration 4: 578 455 367 207 129 
// Sorted order: 578 455 367 207 129 


// You are using GCC
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"Initial order:";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    // cout<<"After Iteration"
    for(int i=1;i<n;i++){
        int c=arr[i];
        int j=i-1;
        while(j>=0 && arr[j]<c){
            arr[j+1]=arr[j];
            j--;
            
        }
        arr[j+1]=c;
        
        cout<<endl<<"After Iteration "<<i<<" : ";
        for(int k=0;k<n;k++){
            cout<<arr[k]<<" ";
        }
    }
    cout<<endl<<"Sorted order:";
    for(int k=0;k<n;k++){
        cout<<arr[k]<<" ";
    }
}




// You are given a list of integers representing the scores of students in a class. The task is to sort the scores in ascending order using the bubble sort algorithm. Additionally, you need to print all the iteration values to track the progress of the sorting process.



// Write a program that takes the list of scores as input and performs bubble sorting on the list. After each iteration, print the current state of the list. Finally, display the sorted list of scores.



// Example:



// Input:

// Scores: [89, 72, 95, 68, 82]



// Output:

// Iteration 1: [72, 89, 68, 82, 95]

// Iteration 2: [72, 68, 82, 89, 95]

// Iteration 3: [68, 72, 82, 89, 95]

// Iteration 4: [68, 72, 82, 89, 95]



// Sorted Scores: [68, 72, 82, 89, 95]



// Note: The iteration values represent the state of the list after each pass of the bubble sort algorithm.

// Input format :
// The first line of input contains an integer n, representing the number of scores in the list.

// The second line contains n space-separated integers, representing the scores of the students.

// Output format :
// The program should output the following:

// The original array of scores.

// After each iteration, the array state should be printed.

// The sorted array of scores.



// Refer to the sample output for the formatting specifications.

// Code constraints :
// 0 ≤ score ≤ 100 (the individual score of a student)

// Sample test cases :
// Input 1 :
// 5
// 89 72 95 68 82
// Output 1 :
// Original array: 
// 89 72 95 68 82 
// Iteration 1: 72 89 68 82 95 
// Iteration 2: 72 68 82 89 95 
// Iteration 3: 68 72 82 89 95 
// Iteration 4: 68 72 82 89 95 
// Sorted array: 68 72 82 89 95 




// You are using GCC
#include <iostream>
#include <vector>

using namespace std;

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
        cout << "Iteration " << i + 1 << ": ";
        for (int num : arr) {
            cout << num << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> scores(n);
    for (int i = 0; i < n; ++i) {
        cin >> scores[i];
    }

    cout << "Original array:" << endl;
    for (int num : scores) {
        cout << num << " ";
    }
    cout << endl;

    bubbleSort(scores);

    cout << "Sorted array:" << endl;
    for (int num : scores) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}






// Given an array of integers, sort the odd positions in descending order and even positions in ascending order using insertion sort.



// Example 1:

// Input Format:

// The first line of input should contain an integer n, representing the number of elements in the array.
// The second line of input should contain n space-separated integers, representing the elements of the array.
// Input:

// N: 10

// Array Element: 25 36 96 58 74 14 35 15 75 95



// Output Format:

// The program will sort the array using the even-odd insertion sort algorithm and print the sorted array.
// Output:

// 96 14 75 15 74 36 35 58 25 95 



// Input format :
// The first line of input consists of the number of integers N.

// The second line of input consists of the array of elements separated by space.

// Output format :
// The output displays the sorted array using the even-odd insertion sort algorithm and prints the sorted array.

// Sample test cases :
// Input 1 :
// 10
// 25 36 96 58 74 14 35 15 75 95
// Output 1 :
// 96 14 75 15 74 36 35 58 25 95 



// You are using GCC
#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
        
    }
    for(int i=2;i<n;i=i+2){
        int c=arr[i];
        int j=i-2;
    while(j>=0 && arr[j]<=c){
        arr[j+2]=arr[j];
        j=j-2;
    }    
    arr[j+2]=c;
    }
    for(int q=3;q<n;q=q+2){
        int d=arr[q];
        int k=q-2;
        while(k>=1 && arr[k]>=d){
            arr[k+2]=arr[k];
            k=k-2;
    }
    arr[k+2]=d;

}
for(int i=0;i<n;i++){
    cout<<arr[i]<<" ";
}
}







// Vishwas wants to spend his weekend watching some short films. He got a finite array of short films in front of him. He prefers to watch the highly-rated short film first.



// As he already knows selection sorting, he wants to sort them in such a fashion. Write a code to exhibit how the selection sort algorithm flows step by step in his perception.



// Observe the output carefully to find the steps of the sorting technique from his perception. It's nothing but the descending sort achieved by swapping the maximum elements to the front of every iteration.



// Note: This is a sample question asked in CTS recruitment.

// Input format :
// The first line of input consists of the array size n.

// The second line of input consists of n array of elements, separated by space.

// Output format :
// The output prints the descending sort achieved by swapping the maximum elements to the front of every iteration.



// Refer to the sample output for formatting specifications.

// Sample test cases :
// Input 1 :
// 5
// 3 4 5 1 2
// Output 1 :
// After his step: 1
// 5 4 3 1 2 
// After his step: 2
// 5 4 3 1 2 
// After his step: 3
// 5 4 3 1 2 
// After his step: 4
// 5 4 3 2 1 
// Finally, he got it
// 5 4 3 2 1 
// Input 2 :
// 8
// 9 4 2 5 6 3 0 1
// Output 2 :
// After his step: 1
// 9 4 2 5 6 3 0 1 
// After his step: 2
// 9 6 2 5 4 3 0 1 
// After his step: 3
// 9 6 5 2 4 3 0 1 
// After his step: 4
// 9 6 5 4 2 3 0 1 
// After his step: 5
// 9 6 5 4 3 2 0 1 
// After his step: 6
// 9 6 5 4 3 2 0 1 
// After his step: 7
// 9 6 5 4 3 2 1 0 
// Finally, he got it
// 9 6 5 4 3 2 1 0 




// You are using GCC
#include <iostream>
#include <vector>

using namespace std;

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        int maxIndex = i;
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] > arr[maxIndex]) {
                maxIndex = j;
            }
        }
        swap(arr[i], arr[maxIndex]);
        
        cout << "After his step: " << i + 1 << endl;
        for (int num : arr) {
            cout << num << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> films(n);
    for (int i = 0; i < n; ++i) {
        cin >> films[i];
    }

    selectionSort(films);

    cout << "Finally, he got it" << endl;
    for (int num : films) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}





// You are developing a sports analytics system for a basketball team. As part of the system, you need to implement a feature that finds the second largest player's height from a given array of player heights.



// Write a program that takes user input for the number of players and their respective heights. The program should use the selection sort algorithm to sort the player heights in non-decreasing order.



// After sorting, it should display the sorted array of player heights. Additionally, the program should find and display the second largest player's height from the sorted list.



// This feature will help coaches and scouts identify the second-tallest player on the team, which is crucial for team strategy, player selection, and matchup planning. The program provides an efficient way to sort and find the second-largest player's height within the basketball analytics system, enhancing decision-making and team management.



// Note: This is a sample question asked in CTS recruitment.

// Input format :
// The first line of input consists of the number of elements n in the array.

// The second line of input consists of n array elements, separated by space.

// Output format :
// The first line of output prints the sorted order.

// The second line of output prints the 2nd largest element in the given array.



// Refer to the sample output for formatting specifications.

// Sample test cases :
// Input 1 :
// 5
// 135 169 185 174 212
// Output 1 :
// Sorted array: 212 185 174 169 135 
// The second largest element is 185
// Input 2 :
// 6
// 174 125 136 195 150 138
// Output 2 :
// Sorted array: 195 174 150 138 136 125 
// The second largest element is 174




// You are using GCC
#include <iostream>
#include <vector>

using namespace std;

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] > arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        cin >> heights[i];
    }

    selectionSort(heights);

    cout << "Sorted array:";
    for (int height : heights) {
        cout << " " << height;
    }
    cout << endl;

    cout << "The second largest element is " << heights[1] << endl;

    return 0;
}
